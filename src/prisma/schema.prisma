// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Quiz {
  id                    String          @id @default(cuid())
    title                 String
    userId                String
    user                  User            @relation(fields: [userId], references: [id])
    codeLanguageId        Int
    codeLanguage          CodeLanguage    @relation(fields: [codeLanguageId], references: [id])
    createdAt             DateTime        @default(now())
    updatedAt             DateTime        @updatedAt
    instruction           String          @default("")
    answer                String          @default("")
    submissionCachedCount Int             @default(0)
    submissions           Submission[]
    defaultCode           String          @default("")
    difficultyLevelId     Int             @default(0)
    difficultyLevel       DifficultyLevel @relation(fields: [difficultyLevelId], references: [id])
    solutions             Solution[]
    locale String @default("")
    status QuizStatus @default(DRAFT)
    //challenges Challenge[]
    assessmentQuizzes AssessmentQuiz[]
    assessmentResults AssessmentResult[]
    //quizPointCollection QuizPointCollection[]
}

enum QuizStatus {
  DRAFT
    PENDING
    PUBLISHED_PROTECT
    PUBLISHED_PUBLIC
    REJECTED
    DELETED
}


model DifficultyLevel {
  id      Int    @id @default(autoincrement())
    name    String @unique
    quizzes Quiz[]
    //courses Course[]
}

model CodeLanguage {
  id         Int    @id @default(autoincrement())
    name       String @unique
    prettyName String @default("")
    quizzes    Quiz[]
    //courses    Course[]
}

model User {
  id String @id @default(cuid())
    name String?
        quizzes       Quiz[]
    submissions   Submission[]
    assessments Assessment[]
    adminContact AdminContact?
    assessmentResults AssessmentResult[]
    assessmentCandidates AssessmentCandidate[]
    submissionPoint SubmissionPoint[]
}

model Solution {
    id            String     @id @default(cuid())
    code          String     @default("")
    sequence      Int        @default(0)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    importDirectives String @default("")
    testRunner String @default("")
    testCases     TestCase[]
    quizId        String
    quiz          Quiz       @relation(fields: [quizId], references: [id])
}

model TestCase {
    id         String   @id @default(cuid())
    input      String
    output     String
    sequence   Int      @default(0)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
    solutionId String   @default("")
    solution   Solution @relation(fields: [solutionId], references: [id])
}

model Submission {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    quizId    String
    quiz      Quiz     @relation(fields: [quizId], references: [id])
    code      String
    assessment      AssessmentQuiz?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    assessmentQuizSubmission AssessmentQuizSubmission?
    submissionPoint SubmissionPoint[]
}

enum AssessmentQuizStatus {
  PENDING
  STARTED
  COMPLETED
}

enum AssessmentStatus {
  PENDING
  COMPLETED
}

model Assessment {
  id String @id @default(cuid())
  owner User @relation(fields: [ownerId], references: [id])
  ownerId String 
  title String
  description String
  createdAt             DateTime        @default(now())
  assessmentQuizzes AssessmentQuiz[]
  assessmentCandidates AssessmentCandidate[]
  assessmentResults AssessmentResult[]
  assessmentCandidateEmail AssessmentCandidateEmail[]
  // activityLog ActivityLog[]
}

model AssessmentQuiz {
  assessment Assessment @relation(fields: [assessmentId],references: [id])
  assessmentId String 
  quiz Quiz @relation(fields: [quizId],references: [id])
  quizId String 
  submission Submission? @relation(fields: [submissionId],references: [id])
  submissionId String? @unique

  @@id([assessmentId, quizId])
}

model AssessmentCandidateEmail {
  id String @id @default(cuid())
  email String
  statusCode Int
  errorMessage String?
  assessment Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String 
}

model AdminContact {
  id String @id @default(cuid())
  user User @relation(fields: [userId], references: [id])
  userId String @unique
  companyName String
  contactNumber Int
}

model AssessmentResult {
  id String @id @default(cuid())
  quiz Quiz @relation(fields: [quizId], references: [id])
  quizId String 
  assessment Assessment @relation(fields: [assessmentId], references: [id])
  assessmentId String
  candidate User? @relation(fields: [candidateId], references: [id])
  candidateId String?
  timeTaken Float? @default(0.0)
  status AssessmentQuizStatus @default(PENDING)
  assessmentQuizSubmissions AssessmentQuizSubmission[]
}

model AssessmentCandidate {
  assessment Assessment @relation(fields: [assessmentId],references: [id])
  assessmentId String
  candidate User @relation(fields: [candidateId], references: [id])
  candidateId String
  status AssessmentStatus @default(PENDING)
  token String @unique

  @@id([assessmentId, candidateId])
}

model AssessmentQuizSubmission {
  id String @id @default(cuid())
  assessmentResult AssessmentResult @relation(fields: [assessmentResultId], references: [id])
  assessmentResultId String
  submission Submission? @relation(fields: [submissionId], references: [id])
  submissionId String? @unique
  start DateTime?
  end DateTime?
}

model AssessmentPoint {
  id Int @id @default(autoincrement())
  name String @unique
  point Int
  submissionPoint SubmissionPoint[]
}

model SubmissionPoint {
  id String @id @default(cuid())
  point Int
  user User @relation(fields: [userId], references: [id])
  userId String 
  assessmentPoint AssessmentPoint @relation(fields: [assessmentPointId], references: [id])
  assessmentPointId Int
  submission Submission @relation(fields: [submissionId], references: [id])
  submissionId String
}

model Price {
  id String @id @default(cuid())
  stripePriceId String @unique
  stripeProductId String 
  amount Float
  label String
  description String?
  // subscription Subscription[]
  // priceFeature PriceFeature[]
}

model Feature {
  id Int @id @default(autoincrement())
  name String @unique
  // priceFeature PriceFeature[]
}
